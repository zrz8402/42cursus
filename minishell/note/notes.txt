1. prepare out files
	loop through (|) 
		<< heredoc has highest priority, if we use (normal) ctrl+c forcing to exit, the whole process stops(why signal plays a role). So if there are <<s, we will process them first and save the result in heredoc[i][2] pipes(with marking where they should go later).

		Then we will check < and > in order. If any fails, it stops here.
			if (< in): infile does't exit or we have no permission to read it, stop;
			if (> out | >> out): if no out, creat out
						if no write permission, stop

2. process
	redirection part
		redirect in/here_doc and out in order with dup2()
		dup2(in, STDIN_FILENO)
		dup2(out, STDOUT_FILENO)
	execute part
		built-in commands(may work differently)
		[cmd, options, arguments, NULL];
		cmd - parse cmd
		// to-do: understand how to work with $(VARIABLE)
		// to-do: understand how to make built-in cmds work


echo with/without -n 
	print text with/without newline
  =>
	echo
		printf("\n");
	echo hello world
		printf("hello world"\n)
	echo hello            world
		printf("hello world"\n)
	echo "hello            world"
		printf("hello            world\n")
	echo -n
		return ;
	echo -nnnnn hello
		printf("hello")
	echo -n -n "hello"
		printf("hello")
  =>
	while (args[i] == "option")
		i++;
		option = 1
	while (args[i])
		printf(agrs[i])
		if (next)
			printf(" ") // add a space between
		i++
	if (option == 0)
		printf("\n")
	return (0);

cd (with a relative or absolute path)
	chdir() --#include <stdio.h>
  =>
	cd arg1 arg2
		bash: cd: too many arguments
	cd
		change to HOME
		if (!HOME)
			bash: cd: HOME not set
	cd "dir"
		chdir(dir)
		if fail
			bash: cd: dir: No such file or directory
	update PWD

pwd (no options)
	get the current working directory
	getcwd() --#include <unistd.h>

export (no options)
	set environment variables
  =>
	case 1: export // with nothing
		print all env variables with format like in order:
			declare -x CHROME_DESKTOP="code.desktop"
		if VALUE == NULL
			declare -x A
		if VALUE is empty
			declare -x A=""
	case 2: export A
		add variable A to env_list, its value = NULL
	case 3: export A=
		add variable A to env_list, its value = "" (empty)
	case 4: export A=hello || export A="hello" || export A=hello'
		add variable A to env_list, its value = hello
		-> export A="hello" || export A='hello'
		-> export A="hello""world" => its value = helloworld
	case 5: export A="hello" "world"
		add variable A to env_list, its value = hello
		add variable world to env_list

unset (no options)
	unset environment variables
	unsetenv() --#include <unistd.h>

env (no options/args)
	getenv(VARIABLE)
	if VALUE != NULL
		printf("VARIABLE=VALUE")
	

exit (no options)
	exit() --#include <stdlib.h>
