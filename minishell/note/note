1. prepare out files
	loop through (|) 
		<< heredoc has highest priority, if we use (normal) ctrl+c forcing to exit, the whole process stops(why signal plays a role). So if there are <<s, we will process them first and save the result in heredoc[i][2] pipes(with marking where they should go later).

		Then we will check < and > in order. If any fails, it stops here.
			if (< in): infile does't exit or we have no permission to read it, stop;
			if (> out | >> out): if no out, creat out
						if no write permission, stop

2. process
	redirection part
		redirect in/here_doc and out in order with dup2()
		dup2(in, STDIN_FILENO)
		dup2(out, STDOUT_FILENO)
	execute part
		built-in commands(work differently)
		[cmd, options, arguments, NULL];
		cmd - parse cmd




Built-in Commands:

echo with/without -n 
	print text with/without newline
  =>
	echo
		printf("\n");
	echo hello world
		printf("hello world\n")
	echo hello            world
		printf("hello world\n")
	echo "hello            world"
		printf("hello            world\n")
	echo -n
		return ;
	echo -nnnnn hello
		printf("hello")
	echo -n -n "hello"
		printf("hello")
  =>
	while (args[i] == "option")
		i++;
		option = 1
	while (args[i])
		printf(agrs[i])
		if (next)
			printf(" ") // add a space between
		i++
	if (option == 0)
		printf("\n")
	return (0);

cd (with a relative or absolute path)
	chdir() --#include <stdio.h>
  =>
	cd arg1 arg2
		bash: cd: too many arguments
	cd
		change to HOME
		if (!HOME)
			bash: cd: HOME not set
	cd "dir"
		chdir(dir)
		if fail
			bash: cd: dir: No such file or directory
	update PWD

pwd (no options)
	get the current working directory
	getcwd() --#include <unistd.h>

export (no options)
	set environment variables
	export VAR=value
  =>
	case 1: export
		print all env variables with following format in order:
			declare -x CHROME_DESKTOP="code.desktop"
		if VALUE == NULL
			declare -x A
		if VALUE is empty
			declare -x A=""
		do not print "_=/usr/bin/env" with VAR=_ single underscore
	case 2: export A
		add variable A to env_list, its value = NULL
	case 3: export A=
		add variable A to env_list, its value = "" (empty)
	case 4: export A=hello || export A="hello" || export A=hello'
		add variable A to env_list, its value = hello
		-> export A="hello" || export A='hello'
		-> export A="hello""world" => its value = helloworld
	case 5: export A="hello" "world"
		add variable A to env_list, its value = hello
		add variable world to env_list
  =>
	if (no_arg)
		sort env_list
		printf(env_list)
	to be added


  => env var name requirements:
	must beigin with letter/_underscore
	can contain letters, numbers, underscores
	case-sensitive
	no special characters(like @, !, -, /, or spaces)


env (no options/args)
	if VALUE != NULL
		printf("VARIABLE=VALUE")

unset (no options)
	unset environment variables
  =>
	if (no_arg)
		return
	while (arg)
		if arg in env
			remove from env_list
		arg++


exit (no options)
	exit() --#include <stdlib.h>
  ->check exit status with echo $?
  =>
	exit a || exit ++0
		exit
		bash: exit: a: numeric argument required
		(exit the program)
	exit 9 a
		exit
		bash: exit: too many arguments
	exit a 88
		exit
		bash: exit: a: numeric argument required
	exit 9 99
		exit
		bash: exit: too many arguments
		(do not exit the program)
	exit
		exit
	exit 10
		exit (echo $? = 10)
	exit -10
		exit (echo $? = 246)
  =>
	if (no_arg)
		exit(0)
	if (invalid_arg)
		printf("numeric argument required")
	if (ac > 2)
		printf("too many arguments")
		return 1
	exit(atoi(arg))



exit status codes:
	0: Success 
	Non-zero values (1–255): Failure or error

	1: General error 
		— This is often used for "generic" failure when no other specific exit code applies.
	2: Misuse of shell builtins 
		— For example, in Bash, exit 2 might be used when the command syntax is wrong.
	126: Command invoked cannot execute 
		— This could happen if a command doesn't have execute permission.
	127: Command not found 
		— This is a typical exit code if a command doesn't exist in the system's path.
	128: Invalid argument to exit 
		— This exit code is used when the exit function is used incorrectly.
	130: Script terminated by Ctrl+C 
		— This occurs when a program or script is interrupted by the user (Ctrl+C).
	255: Exit status out of range 
		— An exit status code over 255 is usually an error or an invalid status.



init():
	init_program()
	init_env()
	update_shlvl()  // SHLVL: shell level, call ./minishell -> value(SHLVL) + 1


// may not using all and may not cover all, list here for hint
t_program
{
		t_lex		*lex_list;	// 'input' -> 'tokens' -> lex_list in parsing
								// lex_list -> 'redir' + 'cmd'
		char		**envp;		// to env_list
		t_env		*env_list; 	// to print out env and for export
		int			env_len; 	// maybe
		int			status;		 // $?
		int			exit;
}

t_lex
{
	enum e_ltype		type;
	char				*value;
	int					fd_int; // to be decided how to use this later
	struct s_lex		*next_lex;	
}
		
t_cmd
{
	char	**args;		//['cmd', 'arg1', 'arg2'...]
						//may be empty; e.g. << EOF | wc -l
}


valgrind -q --track-fds=yes --trace-children=yes --leak-check=full --show-leak-kinds=all --error-limit=no --suppressions=valgrind.supp

