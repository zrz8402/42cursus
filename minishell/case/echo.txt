not required
- [ ]  echo bonjour ; |
- [ ]  echo bonjour ; ls
	// treat ';' as literal
- [ ]  echo bonjour > test\ 1
	// cat test\  -> bonjour 1
- [ ]  echo "\s" & echo "\s"
	// special one, think
- [ ]  echo coucou | ;
- [ ]  echo ;;
- [ ]  echo hi";" hihi
- [ ]  echo hi " ; " hihi

invalid
- [ ]  echo bonjour | |
- [ ]  echo >
- [ ]  echo bonjour >>> test
- [ ]  echo bonjour > > out
- [ ]  echo bonjour > $test # with test not defined
	// tricky one, think
- [ ]  echo bonjour > $test w/ t
	// similar to last case
- [ ]  echo "bip | bip ; coyotte > < " "
- [ ]  echo hudifg d | | hugdfihd
- [ ]  echo |
- [ ]  | echo
- [ ]  echo '"
- [ ]  echo "'


with -n
- [ ]  echo -n -n -nnnn -nnnnm
- [ ]  echo -n simple
- [ ]  echo -n bonjour
- [ ]  echo -nn bonjour
- [ ]  echo -n -n -n bonjour
- [ ]  echo "-n" bonjour
- [ ]  echo "-nnnn" bonjour
- [ ]  echo "-nnnn" -n bonjour


// not see as option -n
- [ ]  echo -n"-n" bonjour
- [ ]  echo "-n -n -n"-n bonjour
- [ ]  echo "-n '-n'" bonjour


basic
- [ ]  echo test > file test1
- [ ]  echo 2 >> out1 > out2
- [ ]  echo 2 > out1 >> out2
- [ ]  /bin/echo bonjour
- [ ]  echo "$HOME"
- [ ]  echo '$HOME'
	// difference in interpreting double vs single quotes
- [ ]  > log echo coucou
- [ ]  echo
- [ ]  echo simple
- [ ]  echo ''
- [ ]  echo ""
- [ ]  echo "\n \n \n"
- [ ]  echo "\"
	// not seeing it as special
- [ ]  echo "\n \n \\n"
	// how bash handle it
	// \n \n \n
	// how our minishell handle it
	// \n \n \\n
- [ ]  echo > a Hello World!
- [ ]  > a echo Hello World!
- [ ]  echo echo
- [ ]  echo $
- [ ]  echo $ $
- [ ]  echo rhobebou
- [ ]  echo stop barking
- [ ]  echo "bonjour"
- [ ]  echo bonjour
- [ ]  echo 'bonjour'


special:
- [ ]  echo $?


Double/Single quote + expand variables
- [ ]  echo $USER
- [ ]  echo "$USER"
- [ ]  echo "'$USER'"
- [ ]  echo " '$USER' "
- [ ]  echo text"$USER"
	// textruzhang
- [ ]  echo text"'$USER'" ' $USER '
	// text'ruzhang'  $USER 
- [ ]  echo "text" "$USER" "$USER"
	// text ruzhang ruzhang
- [ ]  echo ' $USER '
- [ ]  echo text "$USER" "$USER"text
- [ ]  echo ''''''''''$USER''''''''''
	// ruzhang (even number of ' before and after, remove all)
- [ ]  echo """"""""$USER""""""""
- [ ]  echo $USER'$USER'text oui oui oui oui $USER oui $USER ''
- [ ]  echo $USER '' $USER $USER '' $USER '' $USER '' $USER -n $USER
	// -n should be right after echo, otherwise, literal instead of option
- [ ]  echo "$USER""$USER""$USER"
- [ ]  echo text"$USER"test
- [ ]  echo '$USER' "$USER" "text ' text"
- [ ]  echo '$USER'
- [ ]  echo $USER " "
- [ ]  echo "$USER""Users/$USER/file""'$USER'"'$USER'
- [ ]  echo "$USER$USER$USER"
- [ ]  echo '$USER'"$USER"'$USER'
- [ ]  echo '"$USER"''$USER'"""$USER"
- [ ]  echo " $USER "'$PWD'
- [ ]  echo " $USER $ "'$PWD'
- [ ]  echo $USER=4
- [ ]  echo $USER=thallard
- [ ]  echo $USER
- [ ]  echo $PWD
- [ ]  echo ok"hello"ok1"mfg" == echo ok'hello'ok1'mfg'
- [ ]  echo okhellook1"mfg" == echo okhellook1'mfg'
- [ ]  echo "o""k "hellook1 == echo 'o''k 'hellook1
- [ ]  echo ok"'hello'"ok1"hello1"ok2


Cases combining other cmds:
- [ ]  echo oui | cat -e
- [ ]  echo test | cat -e | cat -e | cat -e
- [ ]  echo test | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e | cat -e
- [ ]  echo $PWD|cat -e
- [ ]  echo $PWD hallo | cat -e
- [ ]  echo '$PWD hallo | cat -e'
- [ ]  echo "$PWD hallo | cat -e"
- [ ]  echo oui | echo non | echo something | grep oui
- [ ]  echo oui | echo non | echo something | grep non
- [ ]  echo oui | echo non | echo something | grep something
- [ ]  cd .. | echo "something"
- [ ]  cd .. | echo "something"
- [ ]  cd / | echo "something"
- [ ]  wc < Makefile -l | cat -e > outfile | echo hello | rev > outfile2


Cases focusing other cmd:
- [ ]  exit echo
- [ ]  exit echo something
- [ ]  export echo
- [ ]  unset echo